/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  4.0                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "constant";
    object      transportProperties;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

phases (water air);

water
{
    transportModel  Newtonian;
    nu              [ 0 2 -1 0 0 0 0 ] 0.0608;
    rho             [ 1 -3 0 0 0 0 0 ] 1000;
}

air
{
    transportModel  Newtonian;
    nu              [ 0 2 -1 0 0 0 0 ] 0.0608;
    rho             [ 1 -3 0 0 0 0 0 ] 1;
}

sigma           	[ 1 0 -2 0 0 0 0 ] 1111;


// B*** kva_interfaceProperties *** //
curvatureModel      vofsmooth; // normal; // If absent default: normal
vofsmoothCoeffs
{
	//calculateNormal		normal;
	//calculateNormal		smoothedGradient smootherKernel kernelParams;
	calculateNormal{
		type smoothedGradient;
		smoother{
			type	Raeini;
			numIts	2;
		}
	}
	 
	//smoothAlpha			smootherKernel kernelParams;
	//smoothAlpha			Csk 0.5 2; // Csk 1 2;
	smoothAlpha{
		type 	Csk;
		Csk 	0.5;
		numIts	2;
	}
	
	//smoothCurvature		smootherKernel kernelParams;
	//smoothCurvature		Raeini	2; // CELESTE	8; // none;
	//smoothCurvature{
		//type 	Raeini;
		//numIts 	2;
	//}
	smoothCurvature{
		type 	interpolate;
		numIts 	2;
		weightFactor{
    		type Raeini;
    		alpha alpha.water;
		}
	}
	
}

	/* smootherKernel can be:
	  * none; // No smoothing
	  * interpolate numIts weightFactor; // smooth by interpolating from cell centres to cell faces and back.
		weightFactor can be:
		 * Raeini
		 * CELESTE 8
		   where the number is the power used in the weighting factor (larger numbers are sharper).
		 * none
	  * Raeini numIts; // specialised kernel based on interpolate for the curvature
	  * NYI: CELESTE ...; // specialised kernel based on interpolate for the curvature
	  * Csk 0.5 numIts; // specialised kernel based on interpolate for smoothing alpha
	    where the first argument is the Csk coefficient (similar to underrelaxation) (0 = no smoothing, 1 = complete smoothing)
	  * NYI: Convolve cosine 0.75;
	*/

surfaceTensionForceModel{
    densityWeighted         no; // If absent default: no (for my case I found density-weighting to _increase_ spurious currents)
    
    //deltaModel				??;
    deltaModel{
    	type	Cpc;
    	Cpc		0.5; // original CSF = 0, SSF -> 1 (0.98 was best for Raeini), FSF (Raeini) = 0.5.
    }
    
    //interpolateCurvature	weightFactor;
    //interpolateCurvature	Raeini alpha.water; // CELESTE 8;
    //interpolateCurvature	unweighted;
    
    //interpolateCurvature
    //{
    	//type Raeini;
    	//alpha alpha.water;
    //}
    interpolateCurvature
    {
    	weightFactor
    	{
    		type Raeini;
    		alpha alpha.water;
    	}
    }
    
    //{
    	//type CELESTE;
    	//delta 8;
		//alpha alpha.water;
    //}
    
}
// E*** kva_interfaceProperties *** //



// ************************************************************************* //
